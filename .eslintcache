[{"C:\\Users\\kempj\\code\\bhome\\src\\components\\MapComp\\index.js":"1","C:\\Users\\kempj\\code\\bhome\\src\\App.js":"2","C:\\Users\\kempj\\code\\bhome\\src\\components\\AppBar\\index.js":"3","C:\\Users\\kempj\\code\\bhome\\src\\components\\NavTabs\\index.js":"4","C:\\Users\\kempj\\code\\bhome\\src\\components\\FilterBtns\\index.js":"5","C:\\Users\\kempj\\code\\bhome\\src\\components\\Directory\\index.js":"6","C:\\Users\\kempj\\code\\bhome\\src\\components\\DirectoryCard\\index.js":"7","C:\\Users\\kempj\\code\\bhome\\src\\index.js":"8","C:\\Users\\kempj\\code\\bhome\\src\\components\\Welcome\\index.js":"9","C:\\Users\\kempj\\code\\bhome\\src\\components\\Details\\Index.js":"10","C:\\Users\\kempj\\code\\bhome\\src\\components\\Details\\index.js":"11"},{"size":3480,"mtime":1613423873905,"results":"12","hashOfConfig":"13"},{"size":3740,"mtime":1613418209307,"results":"14","hashOfConfig":"13"},{"size":3210,"mtime":1611791813696,"results":"15","hashOfConfig":"13"},{"size":1548,"mtime":1611792960659,"results":"16","hashOfConfig":"13"},{"size":2310,"mtime":1610244587977,"results":"17","hashOfConfig":"13"},{"size":560,"mtime":1611790368249,"results":"18","hashOfConfig":"13"},{"size":5464,"mtime":1613423884976,"results":"19","hashOfConfig":"13"},{"size":174,"mtime":1607301495574,"results":"20","hashOfConfig":"13"},{"size":2969,"mtime":1611876779111,"results":"21","hashOfConfig":"13"},{"size":2944,"mtime":1613423712265,"results":"22","hashOfConfig":"13"},{"size":3047,"mtime":1613425114794,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"8jz011",{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Users\\kempj\\code\\bhome\\src\\components\\MapComp\\index.js",["50","51","52","53","54","55","56"],"import React from 'react'\nimport \"./style.css\";\nimport Grid from '@material-ui/core/Grid';\nimport {\n    MapContainer,\n    TileLayer,\n    Marker,\n    Popup,\n    Tooltip\n  } from \"react-leaflet\";\nimport { divIcon } from \"leaflet\";\nimport Details from '../Details'\n\nimport Typography from '@material-ui/core/Typography';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport PlaceIcon from '@material-ui/icons/Place';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport LabelIcon from '@material-ui/icons/Label';\nimport PeopleIcon from '@material-ui/icons/People';\n\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nimport { red, green, blue, yellow, purple, teal  } from '@material-ui/core/colors';\n\nexport default function MapComp({ data, mapExtent }) {\n    \n    // function that takes in the data.category in each marker to determine the build of the icon\n    const buildIcon = (category) => {\n        // variable to fill with the category color\n        let colorCat \n        // if category matches set the color\n        if (category === \"Housing\") {\n          colorCat = red[500];\n        } else if (category === \"Substance use\") {\n          colorCat = green[500];\n        } else if (category === \"Food\") {\n          colorCat = purple[500];\n        } else if (category === \"Mental Health\") {\n          colorCat = teal[500];\n        } else if (category === \"Multi\") {\n          colorCat = yellow[800];\n        } else {\n          colorCat = blue[500];\n        }\n        \n        // render the static markup for the icon and span to inherit the color\n        const iconMarkup = renderToStaticMarkup(\n        <span style={{color: colorCat}} >\n            <i className=\" fa fa-map-marker-alt fa-3x\" />\n        </span>\n        );\n        // setup the divIcon that leaflet uses\n        const customMarkerIcon = divIcon({\n            html: iconMarkup,\n            iconAnchor:   [30, 30],\n            popupAnchor:  [-15, -30]\n        });\n        // return the marker so we can call this function in the marker component in our map\n        return customMarkerIcon\n    }\n    \n      \n    \n    return (\n        <Grid container item spacing={3} justify=\"center\">\n            <div id=\"mapWindow\">\n                <MapContainer center={mapExtent.bounds} zoom={mapExtent.zoom} scrollWheelZoom={false}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {data.map((marker) => (\n                    <Marker\n                        icon = {buildIcon(marker.Category)}\n                        // key={`marker-${marker.id}`}\n                        // id={marker.id}\n                        eventHandlers={{\n                        click: (e)=>{\n                            e.target.openPopup()\n                        }\n                        }}\n                        position={{\n                        lat: marker.lat,\n                        lng: marker.long,\n                        }}\n                    >\n                        <Tooltip>{marker.program}</Tooltip>\n                        <Popup>\n                            <Details data={marker} />\n                        </Popup>\n                    </Marker>\n                    ))}\n                </MapContainer>\n            </div>\n        </Grid>\n    )\n}\n","C:\\Users\\kempj\\code\\bhome\\src\\App.js",["57","58","59","60","61"],"C:\\Users\\kempj\\code\\bhome\\src\\components\\AppBar\\index.js",["62","63","64","65","66","67"],"C:\\Users\\kempj\\code\\bhome\\src\\components\\NavTabs\\index.js",["68","69","70"],"import React, {useState, useEffect} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport MapIcon from '@material-ui/icons/Map';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    minWidth:200,\n    maxWidth: 200,\n  },\n  tab:{\n    minWidth: 5,\n    width: 50\n  }\n});\n\nexport default function NavTabs(props) {\n  const classes = useStyles();\n  // setup the initial value of the view: 0=list 1=map\n  const [value, setValue] = useState(0);\n\n  useEffect(()=>{\n    if(props.view===\"list\"){\n      setValue(0)\n    }else{\n      setValue(1)\n    }\n  },[props.view])\n  \n  // handle the tab change\n  const handleChange = (event, newValue) => {\n    //fire the passed down handleView action based on the new value\n    props.handleView(newValue)\n    // update the value based on the tab\n    setValue(newValue);\n  };\n\n  return (\n      <Tabs\n        value={value}\n        className={classes.root}\n        onChange={handleChange}\n        variant=\"fullWidth\"\n        indicatorColor=\"secondary\"\n        textColor=\"secondary\"\n        aria-label=\"icon label tabs example\"\n      >\n        <Tab className={classes.tab} icon={<ListAltIcon />} label=\"LIST\" />\n        <Tab className={classes.tab} icon={<MapIcon />} label=\"MAP\" />\n      </Tabs>\n  );\n}\n","C:\\Users\\kempj\\code\\bhome\\src\\components\\FilterBtns\\index.js",["71"],"C:\\Users\\kempj\\code\\bhome\\src\\components\\Directory\\index.js",[],"C:\\Users\\kempj\\code\\bhome\\src\\components\\DirectoryCard\\index.js",["72"],"C:\\Users\\kempj\\code\\bhome\\src\\index.js",[],["73","74"],"C:\\Users\\kempj\\code\\bhome\\src\\components\\Welcome\\index.js",[],"C:\\Users\\kempj\\code\\bhome\\src\\components\\Details\\Index.js",["75"],"C:\\Users\\kempj\\code\\bhome\\src\\components\\Details\\index.js",["76"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport LabelIcon from '@material-ui/icons/Label';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  address: {\r\n    color: \"red\",\r\n  },\r\n  \r\n}));\r\n\r\nexport default function Details({ data }) {\r\n\r\n  const handleBlank = (data) =>{\r\n    if(data){\r\n      return data\r\n    }else{\r\n      return 'Coming soon...'\r\n    }\r\n  }\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <AccessTimeIcon />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                {handleBlank(data.hours)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <PlaceIcon />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography className={}variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                {handleBlank(data.Zip)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <PhoneIcon /> \r\n            </Grid>\r\n            <Grid item>\r\n            <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n              {handleBlank(data.phone)}\r\n            </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <LanguageIcon />\r\n            </Grid>\r\n            <Grid item>\r\n            <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n              {data.web ? <a href={`${data.web}`} target=\"_blank\">{data.program} Website</a> : \"Coming soon...\"}\r\n            </Typography> \r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <LabelIcon /> \r\n            </Grid>\r\n            <Grid item>\r\n            <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n              {handleBlank(data.services)}\r\n            </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <PeopleIcon /> \r\n            </Grid>\r\n            <Grid item>\r\n            <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n              {handleBlank(data.target)}\r\n            </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"77","severity":1,"message":"78","line":14,"column":8,"nodeType":"79","messageId":"80","endLine":14,"endColumn":18},{"ruleId":"77","severity":1,"message":"81","line":15,"column":8,"nodeType":"79","messageId":"80","endLine":15,"endColumn":22},{"ruleId":"77","severity":1,"message":"82","line":16,"column":8,"nodeType":"79","messageId":"80","endLine":16,"endColumn":17},{"ruleId":"77","severity":1,"message":"83","line":17,"column":8,"nodeType":"79","messageId":"80","endLine":17,"endColumn":17},{"ruleId":"77","severity":1,"message":"84","line":18,"column":8,"nodeType":"79","messageId":"80","endLine":18,"endColumn":20},{"ruleId":"77","severity":1,"message":"85","line":19,"column":8,"nodeType":"79","messageId":"80","endLine":19,"endColumn":17},{"ruleId":"77","severity":1,"message":"86","line":20,"column":8,"nodeType":"79","messageId":"80","endLine":20,"endColumn":18},{"ruleId":"77","severity":1,"message":"78","line":12,"column":8,"nodeType":"79","messageId":"80","endLine":12,"endColumn":18},{"ruleId":"77","severity":1,"message":"87","line":16,"column":10,"nodeType":"79","messageId":"80","endLine":16,"endColumn":17},{"ruleId":"77","severity":1,"message":"88","line":29,"column":16,"nodeType":"79","messageId":"80","endLine":29,"endColumn":23},{"ruleId":"77","severity":1,"message":"89","line":46,"column":9,"nodeType":"79","messageId":"80","endLine":46,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":58,"column":5,"nodeType":"92","endLine":58,"endColumn":13,"suggestions":"93"},{"ruleId":"77","severity":1,"message":"94","line":2,"column":16,"nodeType":"79","messageId":"80","endLine":2,"endColumn":24},{"ruleId":"77","severity":1,"message":"95","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":25},{"ruleId":"77","severity":1,"message":"96","line":6,"column":8,"nodeType":"79","messageId":"80","endLine":6,"endColumn":20},{"ruleId":"77","severity":1,"message":"97","line":10,"column":8,"nodeType":"79","messageId":"80","endLine":10,"endColumn":19},{"ruleId":"77","severity":1,"message":"98","line":12,"column":8,"nodeType":"79","messageId":"80","endLine":12,"endColumn":15},{"ruleId":"77","severity":1,"message":"99","line":13,"column":8,"nodeType":"79","messageId":"80","endLine":13,"endColumn":15},{"ruleId":"77","severity":1,"message":"100","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":13},{"ruleId":"77","severity":1,"message":"83","line":6,"column":8,"nodeType":"79","messageId":"80","endLine":6,"endColumn":17},{"ruleId":"77","severity":1,"message":"101","line":9,"column":8,"nodeType":"79","messageId":"80","endLine":9,"endColumn":21},{"ruleId":"77","severity":1,"message":"94","line":1,"column":16,"nodeType":"79","messageId":"80","endLine":1,"endColumn":24},{"ruleId":"77","severity":1,"message":"102","line":6,"column":8,"nodeType":"79","messageId":"80","endLine":6,"endColumn":17},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":58,"column":51,"nodeType":"109","endLine":58,"endColumn":66},{"ruleId":null,"fatal":true,"severity":2,"message":"110","line":44,"column":37},"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'AccessTimeIcon' is defined but never used.","'PlaceIcon' is defined but never used.","'PhoneIcon' is defined but never used.","'LanguageIcon' is defined but never used.","'LabelIcon' is defined but never used.","'PeopleIcon' is defined but never used.","'spacing' is defined but never used.","'setData' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["111"],"'useState' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'ToggleButton' is defined but never used.","'ListAltIcon' is defined but never used.","'MapIcon' is defined but never used.","'Tooltip' is defined but never used.","'Paper' is defined but never used.","'PersonPinIcon' is defined but never used.","'CardMedia' is defined but never used.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","Parsing error: JSX attributes must only be assigned a non-empty expression\n\n  42 |             </Grid>\n  43 |             <Grid item>\n> 44 |               <Typography className={}variant=\"body2\" color=\"textPrimary\" component=\"p\">\n     |                                     ^\n  45 |                 {handleBlank(data.Zip)}\n  46 |               </Typography>\n  47 |             </Grid>",{"desc":"114","fix":"115"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [data, filter]",{"range":"116","text":"117"},[2012,2020],"[data, filter]"]